//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.3.2 
// See <a href="https://javaee.github.io/jaxb-v2/">https://javaee.github.io/jaxb-v2/</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2022.08.17 at 10:50:51 PM AEST 
//


package au.org.aodn.thredds.xml.ncml;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for AggregationType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="AggregationType"&gt;
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}string"&gt;
 *     &lt;enumeration value="forecastModelRunCollection"/&gt;
 *     &lt;enumeration value="forecastModelRunSingleCollection"/&gt;
 *     &lt;enumeration value="joinExisting"/&gt;
 *     &lt;enumeration value="joinNew"/&gt;
 *     &lt;enumeration value="tiled"/&gt;
 *     &lt;enumeration value="union"/&gt;
 *   &lt;/restriction&gt;
 * &lt;/simpleType&gt;
 * </pre>
 * 
 */
@XmlType(name = "AggregationType")
@XmlEnum
public enum AggregationType {

    @XmlEnumValue("forecastModelRunCollection")
    FORECAST_MODEL_RUN_COLLECTION("forecastModelRunCollection"),
    @XmlEnumValue("forecastModelRunSingleCollection")
    FORECAST_MODEL_RUN_SINGLE_COLLECTION("forecastModelRunSingleCollection"),
    @XmlEnumValue("joinExisting")
    JOIN_EXISTING("joinExisting"),
    @XmlEnumValue("joinNew")
    JOIN_NEW("joinNew"),
    @XmlEnumValue("tiled")
    TILED("tiled"),
    @XmlEnumValue("union")
    UNION("union");
    private final String value;

    AggregationType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static AggregationType fromValue(String v) {
        for (AggregationType c: AggregationType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
